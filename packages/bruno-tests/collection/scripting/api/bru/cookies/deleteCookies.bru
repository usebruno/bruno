meta {
  name: deleteCookies
  type: http
  seq: 7
}

get {
  url: {{host}}/ping
  body: none
  auth: inherit
}

script:pre-request {
  const jar = bru.cookies.jar()
  
  // Set up test cookies before the request
  try {
    await jar.setCookies('https://testbench-sanity.usebruno.com', [
      {
        key: 'test_cookie_1',
        value: 'value1',
        path: '/',
        httpOnly: false,
        secure: true
      },
      {
        key: 'test_cookie_2', 
        value: 'value2',
        path: '/',
        httpOnly: true,
        secure: true
      },
      {
        key: 'test_cookie_3',
        value: 'value3',
        path: '/api',
        httpOnly: false,
        secure: true
      }
    ]);
    
    console.log("Test cookies set up successfully in pre-request script");
    
    // Verify cookies were set
    const cookies = await jar.getCookies('https://testbench-sanity.usebruno.com');
    console.log(`${cookies.length} cookies set for domain`);
    
  } catch (error) {
    console.error("Failed to set up test cookies:", error);
    throw new Error(`Pre-request cookie setup failed: ${error.message || error}`);
  }
}

script:post-response {
  const jar = bru.cookies.jar()
  
  // Verify cookies exist before deletion
  try {
    const cookiesBeforeDeletion = await jar.getCookies('https://testbench-sanity.usebruno.com');
  
    test("cookies should exist before clearing", function() {
    expect(cookiesBeforeDeletion).to.be.an('array');
    expect(cookiesBeforeDeletion.length).to.be.greaterThan(0);
  });
    
    
    if (cookiesBeforeDeletion.length === 0) {
      throw new Error("No cookies found to delete - setup may have failed");
    }
    
    // Delete all cookies for the domain
    await jar.deleteCookies('https://testbench-sanity.usebruno.com');
    console.log("deleteCookies operation completed in post-response");
    
    // Verify deletion worked
    const cookiesAfterDeletion = await jar.getCookies('https://testbench-sanity.usebruno.com');
    console.log(`Found ${cookiesAfterDeletion.length} cookies after deletion`);
    
  } catch (error) {
    console.error("Delete cookies error in post-response:", error);
    throw new Error(`Failed to delete cookies in post-response: ${error.message || error}`);
  }
}

tests {
  const jar = bru.cookies.jar()
  
  jar.getCookies("https://testbench-sanity.usebruno.com", function(error, remainingCookies) {
    if(error) {
      console.error("Error checking remaining cookies:", error)
      throw new Error(`Failed to get remaining cookies: ${error.message || error}`)
    }
    
    test("should have no cookies remaining after deletion", function() {
      expect(remainingCookies).to.be.an('array');
      expect(remainingCookies.length).to.equal(0);
      console.log("âœ“ Confirmed: no cookies remain for domain after deleteCookies");
    });
  });
  
  jar.clear()
}

settings {
  encodeUrl: true
}
