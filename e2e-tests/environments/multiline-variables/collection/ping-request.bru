meta {
  name: ping-request
  type: http
  seq: 1
}

post {
  url: {{host}}/api/echo
  body: text
  auth: none
}

body:text {
  Ping Test Request
  Host: {{host}}

  Multiline Data:
  {{multiline_data}}

  End of multiline content.
}

tests {
  test("should get 200 response", function() {
    expect(res.getStatus()).to.equal(200);
  });

 test("should resolve host environment variable correctly", function() {
    const body = res.getBody();
    // HTTP Faker echo endpoint returns the request details
    // Verify the host variable was resolved in the request URL
    expect(body.url).to.contain("httpfaker.org/api/echo");
  });

  test("should resolve host variable in request body", function() {
    const body = res.getBody();
    // Verify the host variable was resolved in the text body
    expect(body.body).to.contain("Host: https://www.httpfaker.org");
  });

  test("should contain static content in request body", function() {
    const body = res.getBody();
    // Verify static content is preserved
    expect(body.body).to.contain("Ping Test Request");
    expect(body.body).to.contain("End of multiline content");
  });

  test("should resolve multiline_data variable correctly", function() {
    const body = res.getBody();
    // Verify the multiline variable was resolved and contains all three lines
    expect(body.body).to.contain("line1: first line of data");
    expect(body.body).to.contain("line2: second line of data");
    expect(body.body).to.contain("line3: third line of data");
    expect(body.body).to.contain("Multiline Data:");
  });
}
